{"version":3,"sources":["components/custom/spinner/index.tsx","components/custom/spinner/s.module.scss","../node_modules/@ant-design/icons-svg/es/asn/LoadingOutlined.js","../node_modules/@ant-design/icons/es/icons/LoadingOutlined.js","modules/smart-exposure/components/transactions-table/index.tsx","modules/smart-exposure/views/portfolio-view/portfolio-table/positions.tsx","modules/smart-exposure/views/portfolio-view/portfolio-table/index.tsx","modules/smart-exposure/views/portfolio-view/portfolio-value/index.tsx","modules/smart-exposure/views/portfolio-view/index.tsx"],"names":["Spinner","className","children","spinning","restProps","s","container","name","classNames","spinner","module","exports","LoadingOutlined","props","ref","React","AntdIcon","_objectSpread","icon","LoadingOutlinedSvg","displayName","TransactionsTable","transactionType","accountAddress","poolAddress","eTokenAddress","getTokenIconBySymbol","useKnownTokens","seAPI","useSeAPI","useState","dataList","setDataList","loading","setLoading","total","page","pageSize","filters","setFilters","useEffect","prevFilters","fetchTransactions","limit","then","result","Array","isArray","data","meta","count","catch","err","console","error","finally","columns","useMemo","heading","render","item","style","whiteSpace","name1","tokenA","symbol","name2","tokenB","size","type","weight","color","eTokenSymbol","formatToken","BigNumber","from","amountA","unscaleBy","decimals","formatUSD","multipliedBy","tokenAPrice","amountB","tokenBPrice","amountEToken","dividedBy","sFactorE","address","variation","shortenAddr","transactionHash","date","Date","blockTimestamp","format","current","onChange","text","flexShrink","contract","useContract","loadBalance","loadCommon","unscaledBalance","balance","state","eTokenPrice","to","PositionsTable","tranches","setTranches","fetchTranches","rowKey","tabs","id","initialFiltersState","filtersOptions","label","defaultValue","itemRender","options","value","PortfolioTable","activeTab","setActiveTab","account","useWallet","filtersState","setFiltersState","cn","borderBottom","overflowX","paddingRight","paddingLeft","activeKey","onClick","prevState","undefined","PortfolioValue","PeriodTabsKey","day","periodFilter","setPeriodFilter","fetchPortfolioValue","window","AntdNotification","message","ticks","generateTicks","padding","length","width","height","margin","left","gradientTransform","offset","stopColor","vertical","strokeDasharray","stroke","dataKey","tickMargin","minTickGap","tickFormatter","formatTick","axisLine","tickLine","numberFormat","notation","separator","labelFormatter","tag","formatter","_","payload","fill","strokeWidth","PortfolioView","pools","setPools","activePool","setActivePool","getTokenBySymbol","fetchPools","active","map","pool","disabled","poolName"],"mappings":"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","file":"static/js/portfolio-view.18aa2876.chunk.js","sourcesContent":["import classNames from 'classnames';\n\nimport { Icon } from 'components/icon';\nimport { FCx } from 'components/types.tx';\n\nimport s from './s.module.scss';\n\ntype PropsType = {\n  spinning?: boolean;\n};\n\nexport const Spinner: FCx<PropsType> = ({ className, children, spinning, ...restProps }) => {\n  if (children) {\n    if (spinning) {\n      return (\n        <div className={s.container}>\n          <div className={s.children}>{children}</div>\n          <Icon name=\"loader\" className={classNames(s.spinner, className)} {...restProps} />\n        </div>\n      );\n    }\n\n    return <>{children}</>;\n  }\n\n  return <Icon name=\"loader\" className={classNames(s.spinner, className)} {...restProps} />;\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinner\":\"s_spinner__2lxg5\",\"rotate\":\"s_rotate__K9I_G\",\"container\":\"s_container__2DwVy\",\"children\":\"s_children__1ZC_G\"};","// This icon file is generated automatically.\nvar LoadingOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"0 0 1024 1024\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M988 548c-19.9 0-36-16.1-36-36 0-59.4-11.6-117-34.6-171.3a440.45 440.45 0 00-94.3-139.9 437.71 437.71 0 00-139.9-94.3C629 83.6 571.4 72 512 72c-19.9 0-36-16.1-36-36s16.1-36 36-36c69.1 0 136.2 13.5 199.3 40.3C772.3 66 827 103 874 150c47 47 83.9 101.8 109.7 162.7 26.7 63.1 40.2 130.2 40.2 199.3.1 19.9-16 36-35.9 36z\" } }] }, \"name\": \"loading\", \"theme\": \"outlined\" };\nexport default LoadingOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LoadingOutlinedSvg from \"@ant-design/icons-svg/es/asn/LoadingOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar LoadingOutlined = function LoadingOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LoadingOutlinedSvg\n  }));\n};\n\nLoadingOutlined.displayName = 'LoadingOutlined';\nexport default /*#__PURE__*/React.forwardRef(LoadingOutlined);","import { useEffect, useMemo, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { format } from 'date-fns';\nimport { formatToken, formatUSD, shortenAddr } from 'web3/utils';\n\nimport { ExplorerAddressLink, ExplorerTxLink } from 'components/button';\nimport { ColumnType, Table, TableFooter } from 'components/custom/table';\nimport { Text } from 'components/custom/typography';\nimport { useKnownTokens } from 'components/providers/knownTokensProvider';\nimport { TokenIcon, TokenIconNames, TokenIconPair } from 'components/token-icon';\nimport { TransactionApiType, useSeAPI } from 'modules/smart-exposure/api';\n\nexport const TransactionsTable = ({\n  transactionType,\n  accountAddress,\n  poolAddress,\n  eTokenAddress,\n}: {\n  transactionType?: TransactionApiType['transactionType'];\n  accountAddress?: string;\n  poolAddress?: string;\n  eTokenAddress?: string;\n}) => {\n  const { getTokenIconBySymbol } = useKnownTokens();\n  const seAPI = useSeAPI();\n  const [dataList, setDataList] = useState<TransactionApiType[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [filters, setFilters] = useState<{\n    total: number;\n    page: number;\n    pageSize: number;\n    accountAddress?: string;\n    poolAddress?: string;\n    eTokenAddress?: string;\n    transactionType?: TransactionApiType['transactionType'];\n  }>({\n    total: 0,\n    page: 1,\n    pageSize: 10,\n    accountAddress,\n    poolAddress,\n    eTokenAddress,\n    transactionType,\n  });\n\n  useEffect(() => {\n    setFilters(prevFilters => ({\n      ...prevFilters,\n      page: 1,\n      accountAddress,\n      poolAddress,\n      eTokenAddress,\n      transactionType,\n    }));\n  }, [accountAddress, poolAddress, transactionType]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    seAPI\n      .fetchTransactions({\n        page: filters.page,\n        limit: filters.pageSize,\n        accountAddress: filters.accountAddress,\n        poolAddress: filters.poolAddress,\n        eTokenAddress: filters.eTokenAddress,\n        transactionType: filters.transactionType,\n      })\n      .then(result => {\n        if (Array.isArray(result.data)) {\n          setDataList(result.data);\n          setFilters(prevFilters => ({\n            ...prevFilters,\n            total: result.meta.count,\n          }));\n        } else {\n          setDataList([]);\n          setFilters(prevFilters => ({\n            ...prevFilters,\n            total: 0,\n          }));\n        }\n      })\n      .catch(err => {\n        setDataList([]);\n        console.error(err);\n      })\n      .finally(() => setLoading(false));\n  }, [filters.page, filters.pageSize, filters.accountAddress, filters.poolAddress, filters.transactionType]);\n\n  const columns: ColumnType<TransactionApiType>[] = useMemo(\n    () => [\n      {\n        heading: 'Tranche / Transaction',\n        render: item => (\n          <div className=\"flex align-center\" style={{ whiteSpace: 'nowrap' }}>\n            <TokenIconPair\n              name1={getTokenIconBySymbol(item.tokenA.symbol)}\n              name2={getTokenIconBySymbol(item.tokenB.symbol)}\n              size={32}\n              className=\"mr-16\"\n            />\n            <div>\n              <Text type=\"p1\" weight=\"semibold\" color=\"primary\" className=\"mb-4\">\n                {item.eTokenSymbol}\n              </Text>\n              <Text type=\"small\" weight=\"semibold\" color=\"secondary\">\n                {item.transactionType === 'WITHDRAW' ? 'Withdraw' : 'Deposit'} – multiple tokens\n              </Text>\n            </div>\n          </div>\n        ),\n      },\n      {\n        heading: `Token 1 amount`,\n        render: item => (\n          <div style={{ whiteSpace: 'nowrap' }}>\n            <div className=\"flex align-center mb-4\">\n              <TokenIcon name={getTokenIconBySymbol(item.tokenA.symbol) as TokenIconNames} size={16} className=\"mr-4\" />\n              <Text type=\"p1\" weight=\"semibold\" color={item.transactionType === 'DEPOSIT' ? 'red' : 'green'}>\n                {item.transactionType === 'DEPOSIT' ? '-' : '+'}\n                {formatToken(BigNumber.from(item.amountA)?.unscaleBy(item.tokenA.decimals))}\n              </Text>\n            </div>\n            <Text type=\"small\" weight=\"semibold\" color=\"secondary\">\n              {formatUSD(BigNumber.from(item.amountA)?.unscaleBy(item.tokenA.decimals)?.multipliedBy(item.tokenAPrice))}\n            </Text>\n          </div>\n        ),\n      },\n      {\n        heading: `Token 2 amount`,\n\n        render: item => (\n          <div style={{ whiteSpace: 'nowrap' }}>\n            <div className=\"flex align-center mb-4\">\n              <TokenIcon name={getTokenIconBySymbol(item.tokenB.symbol) as TokenIconNames} size={16} className=\"mr-4\" />\n              <Text type=\"p1\" weight=\"semibold\" color={item.transactionType === 'DEPOSIT' ? 'red' : 'green'}>\n                {item.transactionType === 'DEPOSIT' ? '-' : '+'}\n                {formatToken(BigNumber.from(item.amountB)?.unscaleBy(item.tokenB.decimals))}\n              </Text>\n            </div>\n            <Text type=\"small\" weight=\"semibold\" color=\"secondary\">\n              {formatUSD(BigNumber.from(item.amountB)?.unscaleBy(item.tokenB.decimals)?.multipliedBy(item.tokenBPrice))}\n            </Text>\n          </div>\n        ),\n      },\n      {\n        heading: 'Pool token amount',\n        render: item => (\n          <Text type=\"p1\" weight=\"semibold\" color={item.transactionType === 'DEPOSIT' ? 'green' : 'red'}>\n            {item.transactionType === 'DEPOSIT' ? '+' : '-'}\n            {formatToken(BigNumber.from(item.amountEToken)?.dividedBy(item.sFactorE))}\n          </Text>\n        ),\n      },\n      ...(accountAddress\n        ? []\n        : [\n            {\n              heading: 'Address',\n              // @ts-ignore\n              render: function Render(item) {\n                return (\n                  <ExplorerAddressLink address={item.accountAddress} variation=\"link\">\n                    {shortenAddr(item.accountAddress, 6, 4)}\n                  </ExplorerAddressLink>\n                );\n              },\n            } as ColumnType<TransactionApiType>,\n          ]),\n      {\n        heading: 'Transaction Hash',\n        render: item => (\n          <ExplorerTxLink address={item.transactionHash} variation=\"link\">\n            {shortenAddr(item.transactionHash, 6, 4)}\n          </ExplorerTxLink>\n        ),\n      },\n      {\n        heading: 'Date',\n        render: item => {\n          const date = new Date(item.blockTimestamp * 1000);\n          return (\n            <>\n              <Text type=\"p1\" weight=\"semibold\" color=\"primary\" className=\"mb-4\">\n                {format(date, 'dd.MM.yyyy')}\n              </Text>\n              <Text type=\"small\" weight=\"semibold\" color=\"secondary\">\n                {format(date, 'HH:mm')}\n              </Text>\n            </>\n          );\n        },\n      },\n    ],\n    [accountAddress],\n  );\n\n  return (\n    <>\n      <Table<TransactionApiType> columns={columns} data={dataList} loading={loading} />\n      <TableFooter\n        total={filters.total}\n        current={filters.page}\n        pageSize={filters.pageSize}\n        onChange={page =>\n          setFilters(prevFilters => ({\n            ...prevFilters,\n            page,\n          }))\n        }\n        text\n      />\n    </>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { formatToken, formatUSD } from 'web3/utils';\n\nimport { ColumnType, Table } from 'components/custom/table';\nimport { useKnownTokens } from 'components/providers/knownTokensProvider';\nimport { TokenIconPair } from 'components/token-icon';\nimport { useContract } from 'hooks/useContract';\nimport { TranchesItemApiType, useSeAPI } from 'modules/smart-exposure/api';\n\nconst columns: ColumnType<TranchesItemApiType>[] = [\n  {\n    heading: 'Tranche / Transaction',\n    render: function Render(item) {\n      const { getTokenIconBySymbol } = useKnownTokens();\n\n      return (\n        <div className=\"flex align-center\">\n          <TokenIconPair\n            name1={getTokenIconBySymbol(item.tokenA.symbol)}\n            name2={getTokenIconBySymbol(item.tokenB.symbol)}\n            size={40}\n            className=\"mr-16\"\n            style={{ flexShrink: 0 }}\n          />\n          <div className=\"text-p1 fw-semibold color-primary mr-4\">{item.eTokenSymbol}</div>\n        </div>\n      );\n    },\n  },\n  {\n    heading: 'Pool token amount',\n    render: function PoolTokenAmount(item) {\n      const contract = useContract(item.eTokenAddress, { loadBalance: true, loadCommon: true });\n\n      const unscaledBalance = contract?.balance?.unscaleBy(contract?.decimals);\n\n      return (\n        <>\n          <div className=\"text-p1 fw-semibold color-primary mb-4\">{formatToken(unscaledBalance) ?? '–'}</div>\n          <div className=\"text-sm fw-semibold color-secondary\">\n            {formatUSD(unscaledBalance?.multipliedBy(item.state.eTokenPrice)) ?? '–'}\n          </div>\n        </>\n      );\n    },\n  },\n  {\n    heading: 'Actions',\n    render: item => (\n      <div className=\"flex align-center col-gap-24\">\n        <Link\n          to={`/smart-exposure/pools/${item.poolAddress}/${item.eTokenAddress}/withdraw`}\n          className=\"button-primary\">\n          Withdraw\n        </Link>\n        {/* <button type=\"button\" className=\"button-ghost\">\n        Change tranche\n      </button> */}\n      </div>\n    ),\n  },\n];\n\ntype PositionsTablePropsType = {\n  poolAddress?: string;\n};\n\nexport const PositionsTable: React.FC<PositionsTablePropsType> = ({ poolAddress }) => {\n  const [tranches, setTranches] = useState<TranchesItemApiType[]>([]);\n  const seAPI = useSeAPI();\n\n  useEffect(() => {\n    seAPI.fetchTranches(poolAddress).then(setTranches);\n  }, [poolAddress]);\n\n  return <Table<TranchesItemApiType> columns={columns} data={tranches} rowKey={item => item.eTokenAddress} />;\n};\n","import { useState } from 'react';\nimport cn from 'classnames';\n\nimport Select from 'components/antd/select';\nimport TableFilter, { TableFilterType } from 'components/custom/table-filter';\nimport { Tabs } from 'components/custom/tabs';\nimport { TransactionApiType } from 'modules/smart-exposure/api';\nimport { TransactionsTable } from 'modules/smart-exposure/components/transactions-table';\nimport { useWallet } from 'wallets/walletProvider';\n\nimport { PositionsTable } from './positions';\n\ntype FiltersStateType = {\n  transactionType: TransactionApiType['transactionType'] | '';\n};\n\nconst tabs: { id: 'positions' | 'transactionHistory'; children: string }[] = [\n  {\n    id: 'positions',\n    children: 'Positions',\n  },\n  {\n    id: 'transactionHistory',\n    children: 'Transaction history',\n  },\n];\n\nconst initialFiltersState: FiltersStateType = {\n  transactionType: '',\n};\n\nconst filtersOptions: TableFilterType[] = [\n  {\n    name: 'transactionType',\n    label: 'Transaction type',\n    defaultValue: '',\n    itemRender: () => {\n      const tokenOpts = [\n        {\n          value: '',\n          label: 'All types',\n        },\n        {\n          value: 'DEPOSIT',\n          label: 'Deposit',\n        },\n        {\n          value: 'WITHDRAW',\n          label: 'Withdraw',\n        },\n      ];\n\n      return <Select options={tokenOpts} className=\"full-width\" />;\n    },\n  },\n];\n\ntype Props = {\n  poolAddress?: string;\n  className?: string;\n};\n\nexport const PortfolioTable: React.FC<Props> = ({ poolAddress, className }) => {\n  const [activeTab, setActiveTab] = useState<'positions' | 'transactionHistory'>(tabs[0].id);\n  const { account } = useWallet();\n  const [filtersState, setFiltersState] = useState<FiltersStateType>(initialFiltersState);\n\n  function handleFilterChange(filters: Record<string, any>) {\n    setFiltersState(prevState => ({\n      ...prevState,\n      ...filters,\n    }));\n  }\n\n  return (\n    <section className={cn('card', className)}>\n      <header\n        className=\"card-header flex align-center p-0\"\n        style={{\n          borderBottom: '1px solid var(--theme-border-color)',\n          overflowX: 'auto',\n          paddingRight: 16,\n          paddingLeft: 24,\n        }}>\n        <Tabs tabs={tabs} activeKey={activeTab} onClick={setActiveTab} variation=\"normal\" size=\"small\" />\n        {activeTab === 'transactionHistory' && (\n          <TableFilter\n            filters={filtersOptions}\n            value={filtersState}\n            onChange={handleFilterChange}\n            className=\"ml-auto\"\n          />\n        )}\n      </header>\n      {activeTab === 'positions' ? (\n        <PositionsTable poolAddress={poolAddress} />\n      ) : (\n        <TransactionsTable\n          poolAddress={poolAddress}\n          accountAddress={account}\n          transactionType={filtersState.transactionType || undefined}\n        />\n      )}\n    </section>\n  );\n};\n","import { useEffect, useMemo, useState } from 'react';\nimport AntdNotification from 'antd/lib/notification';\nimport classNames from 'classnames';\nimport { format } from 'date-fns';\nimport * as ReCharts from 'recharts';\n\nimport Spin from 'components/antd/spin';\nimport { PeriodChartTabs, PeriodTabsKey } from 'components/custom/tabs';\nimport { Text } from 'components/custom/typography';\nimport { PortfolioValueType, useSeAPI } from 'modules/smart-exposure/api';\nimport { ReactComponent as EmptyChartSvg } from 'resources/svg/empty-chart.svg';\nimport { useWallet } from 'wallets/walletProvider';\n\nimport { numberFormat } from 'utils';\nimport { formatTick, generateTicks } from 'utils/chart';\n\ntype Props = {\n  poolAddress?: string;\n  className?: string;\n};\n\nexport const PortfolioValue: React.FC<Props> = ({ poolAddress, className }) => {\n  const { account } = useWallet();\n  const [periodFilter, setPeriodFilter] = useState<PeriodTabsKey>(PeriodTabsKey.day);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [dataList, setDataList] = useState<PortfolioValueType[]>([]);\n  const seAPI = useSeAPI();\n\n  useEffect(() => {\n    if (!account) {\n      return;\n    }\n\n    setLoading(true);\n    seAPI\n      .fetchPortfolioValue({\n        accountAddress: account,\n        window: periodFilter,\n        poolAddress,\n      })\n      .then(result => setDataList(result.data))\n      .catch(err => {\n        setDataList([]);\n        console.error(err);\n        AntdNotification.error({\n          message: err.data,\n        });\n      })\n      .finally(() => setLoading(false));\n  }, [account, poolAddress, periodFilter]);\n\n  const ticks = useMemo(() => {\n    return generateTicks(dataList, periodFilter);\n  }, [dataList, periodFilter]);\n\n  return (\n    <section className={classNames('card', className)}>\n      <header className=\"card-header flex align-center\" style={{ padding: '16px 16px 16px 24px' }}>\n        <Text type=\"p1\" weight=\"semibold\">\n          Portfolio value\n        </Text>\n        <PeriodChartTabs activeKey={periodFilter} onClick={setPeriodFilter} size=\"small\" className=\"ml-auto\" />\n      </header>\n      <div className=\"p-24\">\n        <Spin spinning={loading}>\n          {dataList.length === 0 ? (\n            <div className=\"flex flow-row row-gap-24 align-center justify-center pv-48\">\n              <EmptyChartSvg />\n              <Text type=\"p1\" color=\"secondary\">\n                Not enough data to plot a graph\n              </Text>\n            </div>\n          ) : (\n            <ReCharts.ResponsiveContainer width=\"100%\" height={300} className=\"mb-24\">\n              <ReCharts.AreaChart data={dataList} margin={{ left: 25 }}>\n                <defs>\n                  <linearGradient id=\"chart-red-gradient\" gradientTransform=\"rotate(180)\">\n                    <stop offset=\"0%\" stopColor=\"rgba(var(--theme-red-color-rgb), 0.08)\" />\n                    <stop offset=\"100%\" stopColor=\"rgba(var(--theme-red-color-rgb), 0)\" />\n                  </linearGradient>\n                  {/* <linearGradient id=\"chart-blue-gradient\" gradientTransform=\"rotate(180)\">\n                  <stop offset=\"0%\" stopColor=\"rgba(var(--theme-blue-color-rgb), 0.08)\" />\n                  <stop offset=\"100%\" stopColor=\"rgba(var(--theme-blue-color-rgb), 0)\" />\n                </linearGradient> */}\n                </defs>\n                <ReCharts.CartesianGrid vertical={false} strokeDasharray=\"3 0\" stroke=\"var(--theme-border-color)\" />\n                <ReCharts.XAxis\n                  // dataKey=\"point\"\n                  // axisLine={false}\n                  // tickLine={false}\n                  // tickFormatter={value => formatTick(value, periodFilter)}\n                  dataKey=\"point\"\n                  ticks={ticks}\n                  tickMargin={12}\n                  minTickGap={0}\n                  tickFormatter={value => formatTick(value, periodFilter)}\n                />\n                <ReCharts.YAxis\n                  axisLine={false}\n                  tickLine={false}\n                  tickFormatter={value =>\n                    numberFormat(value, {\n                      notation: 'compact',\n                    }) ?? ''\n                  }\n                />\n                <ReCharts.Tooltip\n                  separator=\"\"\n                  labelFormatter={value => (\n                    <Text type=\"p2\" tag=\"span\" weight=\"semibold\" color=\"primary\">\n                      {typeof value === 'string' ? format(new Date(value), 'MM.dd.yyyy HH:mm') : ''}\n                    </Text>\n                  )}\n                  formatter={(value: number, _: any, { dataKey, payload }: any) => (\n                    <Text\n                      type=\"p2\"\n                      tag=\"span\"\n                      weight=\"semibold\"\n                      color={dataKey === 'portfolioValueSE' ? 'red' : 'blue'}>\n                      {value}\n                    </Text>\n                  )}\n                />\n                <ReCharts.Area\n                  name={`Value: `}\n                  dataKey=\"portfolioValueSE\"\n                  type=\"monotone\"\n                  fill=\"url(#chart-red-gradient)\"\n                  stroke=\"var(--theme-red-color)\"\n                  strokeWidth={2}\n                />\n                {/* <ReCharts.Area\n                name={`TBD `}\n                dataKey=\"tokenBLiquidity\"\n                type=\"monotone\"\n                fill=\"url(#chart-blue-gradient)\"\n                stroke=\"var(--theme-blue-color)\"\n                strokeWidth={2}\n              /> */}\n              </ReCharts.AreaChart>\n            </ReCharts.ResponsiveContainer>\n          )}\n        </Spin>\n      </div>\n    </section>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport { Text } from 'components/custom/typography';\nimport { useKnownTokens } from 'components/providers/knownTokensProvider';\nimport { TokenIcon, TokenIconNames, TokenIconPair } from 'components/token-icon';\nimport { PoolApiType, useSeAPI } from 'modules/smart-exposure/api';\n\nimport { PortfolioTable } from './portfolio-table';\nimport { PortfolioValue } from './portfolio-value';\n\nconst PortfolioView: React.FC = () => {\n  const [pools, setPools] = useState<PoolApiType[]>([]);\n  const [activePool, setActivePool] = useState<PoolApiType | null>(null);\n  const { getTokenBySymbol } = useKnownTokens();\n  const seAPI = useSeAPI();\n\n  useEffect(() => {\n    seAPI.fetchPools().then(result => {\n      setPools(result);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"tab-cards mb-40\">\n        <button type=\"button\" className={cn('tab-card', { active: !activePool })} onClick={() => setActivePool(null)}>\n          <TokenIcon name=\"all\" size={40} className=\"mr-16\" />\n          <div>\n            <Text type=\"p1\" weight=\"semibold\" color=\"primary\">\n              All pairs\n            </Text>\n          </div>\n        </button>\n        {pools.map(pool => {\n          const tokenA = getTokenBySymbol(pool.tokenA.symbol);\n          const tokenB = getTokenBySymbol(pool.tokenB.symbol);\n\n          return (\n            <button\n              key={pool.poolName}\n              type=\"button\"\n              className={cn('tab-card', activePool === pool && 'active')}\n              disabled={false}\n              onClick={() => setActivePool(pool)}>\n              <TokenIconPair\n                name1={tokenA?.icon as TokenIconNames}\n                name2={tokenB?.icon as TokenIconNames}\n                size={40}\n                className=\"mr-16\"\n              />\n              <div>\n                <Text type=\"p1\" weight=\"semibold\" color=\"primary\">\n                  {pool.poolName}\n                </Text>\n              </div>\n            </button>\n          );\n        })}\n      </div>\n      <PortfolioValue poolAddress={activePool?.poolAddress} className=\"mb-32\" />\n      <PortfolioTable poolAddress={activePool?.poolAddress} />\n    </>\n  );\n};\n\nexport default PortfolioView;\n"],"sourceRoot":""}