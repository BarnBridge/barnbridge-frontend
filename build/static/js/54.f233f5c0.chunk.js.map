{"version":3,"sources":["modules/yield-farming/providers/pools-provider/index.tsx","modules/yield-farming/contracts/yfPool.ts","modules/yield-farming/contracts/yfStaking.ts","modules/yield-farming/api.tsx","modules/yield-farming/index.tsx"],"names":["YFPoolID","ABI","createAbiItem","YfPoolContract","yfAddress","totalEpochs","totalSupply","epochDuration","epoch1Start","currentEpoch","poolSize","userStaked","toClaim","on","Web3Contract","UPDATE_ACCOUNT","undefined","emit","UPDATE_DATA","this","Math","min","isPoolEnded","BigNumber","ZERO","epochReward","isEqualTo","dividedBy","multipliedBy","lastActiveEpoch","a","batch","method","totalForDistribution","epochStart","Number","methodArgs","currentPoolSize","from","account","assertAccount","callArgs","currentEpochStake","gasPrice","send","result","YfStakingContract","address","stakedTokens","Map","forEach","stakedToken","currentEpochUserBalance","nextEpochUserBalance","startDate","Date","now","tokenAddress","cEpoch","currentEpochPoolSize","nextEpochPoolSize","get","set","userBalance","amount","Context","createContext","InvariantContext","useYFPools","useContext","useYfContract","useContract","YfPoolsProvider","props","children","config","useConfig","walletCtx","useWallet","useKnownTokens","usdcToken","daiToken","susdToken","univ2Token","bondToken","convertTokenInUSD","stakingContract","contracts","yf","staking","yfStableContract","stable","yfUnilpContract","unilp","yfBondContract","bond","yfPools","useMemo","name","STABLE","label","tokens","contract","UNILP","BOND","useEffect","yfPool","loadCommon","catch","Error","tokenMeta","loadCommonFor","loadUserData","loadUserDataFor","getYFKnownPoolByName","useCallback","poolId","find","pool","getPoolBalanceInUSD","sumEach","token","unscaleBy","decimals","symbol","getPoolEffectiveBalanceInUSD","getMyPoolBalanceInUSD","getMyPoolEffectiveBalanceInUSD","getYFTotalStakedInUSD","getYFTotalEffectiveStakedInUSD","getYFDistributedRewards","distributedReward","getYFTotalSupply","value","Provider","APIYFPoolActionType","useYfAPI","YfAPIProvider","fetchYFPoolTransactions","page","limit","userAddress","actionType","query","queryfy","String","url","URL","api","baseUrl","fetch","toString","then","json","status","Promise","reject","data","map","item","fetchYFPoolChart","start","end","scale","PoolsView","lazy","PoolView","YieldFarmingView","warning","useWarning","warningDestructor","isMobile","addWarn","text","closable","storageIdentity","fallback","path","exact","component","to"],"mappings":"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","file":"static/js/54.f233f5c0.chunk.js","sourcesContent":["import { FC, createContext, useCallback, useContext, useEffect, useMemo } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useContract } from 'web3/components/contractManagerProvider';\n\nimport { useConfig } from 'components/providers/configProvider';\nimport { TokenMeta, useKnownTokens } from 'components/providers/knownTokensProvider';\nimport { YfPoolContract } from 'modules/yield-farming/contracts/yfPool';\nimport { YfStakingContract } from 'modules/yield-farming/contracts/yfStaking';\nimport { useWallet } from 'wallets/walletProvider';\n\nimport { InvariantContext } from 'utils/context';\n\nexport enum YFPoolID {\n  STABLE = 'stable',\n  UNILP = 'unilp',\n  BOND = 'bond',\n}\n\nexport type YfPoolMeta = {\n  name: YFPoolID;\n  label: string;\n  tokens: TokenMeta[];\n  contract: YfPoolContract;\n};\n\nexport type YfPoolsType = {\n  yfPools: YfPoolMeta[];\n  getYFKnownPoolByName: (name: string) => YfPoolMeta | undefined;\n  stakingContract?: YfStakingContract;\n  getPoolBalanceInUSD: (name: string) => BigNumber | undefined;\n  getPoolEffectiveBalanceInUSD: (name: string) => BigNumber | undefined;\n  getMyPoolBalanceInUSD: (name: string) => BigNumber | undefined;\n  getMyPoolEffectiveBalanceInUSD: (name: string) => BigNumber | undefined;\n  getYFTotalStakedInUSD: () => BigNumber | undefined;\n  getYFTotalEffectiveStakedInUSD: () => BigNumber | undefined;\n  getYFDistributedRewards: () => BigNumber | undefined;\n  getYFTotalSupply: () => BigNumber | undefined;\n};\n\nconst Context = createContext<YfPoolsType>(InvariantContext('YfPoolsProvider'));\n\nexport function useYFPools(): YfPoolsType {\n  return useContext(Context);\n}\n\nfunction useYfStakingContract(address: string): YfStakingContract {\n  return useContract<YfStakingContract>(address, () => {\n    return new YfStakingContract(address);\n  });\n}\n\nfunction useYfContract(address: string): YfPoolContract {\n  return useContract<YfPoolContract>(address, () => {\n    return new YfPoolContract(address);\n  });\n}\n\nconst YfPoolsProvider: FC = props => {\n  const { children } = props;\n\n  const config = useConfig();\n  const walletCtx = useWallet();\n  const { usdcToken, daiToken, susdToken, univ2Token, bondToken, convertTokenInUSD } = useKnownTokens();\n\n  const stakingContract = useYfStakingContract(config.contracts.yf?.staking!);\n  const yfStableContract = useYfContract(config.contracts.yf?.stable!);\n  const yfUnilpContract = useYfContract(config.contracts.yf?.unilp!);\n  const yfBondContract = useYfContract(config.contracts.yf?.bond!);\n\n  const yfPools = useMemo<YfPoolMeta[]>(\n    () => [\n      {\n        name: YFPoolID.STABLE,\n        label: 'USDC/DAI/sUSD',\n        tokens: [usdcToken, daiToken, susdToken],\n        contract: yfStableContract,\n      },\n      {\n        name: YFPoolID.UNILP,\n        label: 'USDC_BOND_UNI_LP',\n        tokens: [univ2Token],\n        contract: yfUnilpContract,\n      },\n      {\n        name: YFPoolID.BOND,\n        label: 'BOND',\n        tokens: [bondToken],\n        contract: yfBondContract,\n      },\n    ],\n    [yfBondContract, yfStableContract, yfUnilpContract],\n  );\n\n  useEffect(() => {\n    yfPools.forEach(yfPool => {\n      yfPool.contract.loadCommon().catch(Error);\n      yfPool.tokens.forEach(tokenMeta => {\n        stakingContract.loadCommonFor(tokenMeta.address).catch(Error);\n      });\n    });\n  }, [yfPools, stakingContract]);\n\n  useEffect(() => {\n    if (walletCtx.account) {\n      yfPools.forEach(yfPool => {\n        yfPool.contract.loadUserData().catch(Error);\n\n        yfPool.tokens.forEach(tokenMeta => {\n          stakingContract.loadUserDataFor(tokenMeta.address).catch(Error);\n        });\n      });\n    }\n  }, [walletCtx.account, yfPools, stakingContract]);\n\n  const getYFKnownPoolByName = useCallback(\n    (poolId: string): YfPoolMeta | undefined => {\n      return yfPools.find(pool => pool.name === poolId);\n    },\n    [yfPools],\n  );\n\n  const getPoolBalanceInUSD = useCallback(\n    (poolId: string): BigNumber | undefined => {\n      const pool = getYFKnownPoolByName(poolId);\n\n      if (!pool) {\n        return undefined;\n      }\n\n      return BigNumber.sumEach(pool.tokens, token => {\n        const stakedToken = stakingContract.stakedTokens.get(token.address);\n\n        if (!stakedToken || stakedToken.nextEpochPoolSize === undefined) {\n          return undefined;\n        }\n\n        return convertTokenInUSD(stakedToken.nextEpochPoolSize.unscaleBy(token.decimals), token.symbol);\n      });\n    },\n    [getYFKnownPoolByName, stakingContract.stakedTokens],\n  );\n\n  const getPoolEffectiveBalanceInUSD = useCallback(\n    (poolId: string): BigNumber | undefined => {\n      const pool = getYFKnownPoolByName(poolId);\n\n      if (!pool) {\n        return undefined;\n      }\n\n      return BigNumber.sumEach(pool.tokens, token => {\n        const stakedToken = stakingContract.stakedTokens.get(token.address);\n\n        if (!stakedToken || stakedToken.currentEpochPoolSize === undefined) {\n          return undefined;\n        }\n\n        return convertTokenInUSD(stakedToken.currentEpochPoolSize.unscaleBy(token.decimals), token.symbol);\n      });\n    },\n    [getYFKnownPoolByName, stakingContract.stakedTokens],\n  );\n\n  const getMyPoolBalanceInUSD = useCallback(\n    (poolId: string): BigNumber | undefined => {\n      const pool = getYFKnownPoolByName(poolId);\n\n      if (!pool) {\n        return undefined;\n      }\n\n      return BigNumber.sumEach(pool.tokens, token => {\n        const stakedToken = stakingContract.stakedTokens.get(token.address);\n\n        if (!stakedToken || stakedToken.nextEpochUserBalance === undefined) {\n          return undefined;\n        }\n\n        return convertTokenInUSD(stakedToken.nextEpochUserBalance.unscaleBy(token.decimals), token.symbol);\n      });\n    },\n    [getYFKnownPoolByName, stakingContract.stakedTokens],\n  );\n\n  const getMyPoolEffectiveBalanceInUSD = useCallback(\n    (poolId: string): BigNumber | undefined => {\n      const pool = getYFKnownPoolByName(poolId);\n\n      if (!pool) {\n        return undefined;\n      }\n\n      return BigNumber.sumEach(pool.tokens, token => {\n        const stakedToken = stakingContract.stakedTokens.get(token.address);\n\n        if (!stakedToken || stakedToken.currentEpochUserBalance === undefined) {\n          return undefined;\n        }\n\n        return convertTokenInUSD(stakedToken.currentEpochUserBalance.unscaleBy(token.decimals), token.symbol);\n      });\n    },\n    [getYFKnownPoolByName, stakingContract.stakedTokens],\n  );\n\n  const getYFTotalStakedInUSD = useCallback(() => {\n    return BigNumber.sumEach(yfPools, yfPool => {\n      return getPoolBalanceInUSD(yfPool.name);\n    });\n  }, [yfPools, getPoolBalanceInUSD]);\n\n  const getYFTotalEffectiveStakedInUSD = useCallback(() => {\n    return BigNumber.sumEach(yfPools, yfPool => {\n      return getPoolEffectiveBalanceInUSD(yfPool.name);\n    });\n  }, [yfPools, getPoolEffectiveBalanceInUSD]);\n\n  const getYFDistributedRewards = useCallback(() => {\n    return BigNumber.sumEach(yfPools, yfPool => {\n      const { distributedReward } = yfPool.contract;\n\n      if (distributedReward === undefined) {\n        return undefined;\n      }\n\n      return BigNumber.from(distributedReward);\n    });\n  }, [yfPools]);\n\n  const getYFTotalSupply = useCallback(() => {\n    return BigNumber.sumEach(yfPools, yfPool => {\n      const { totalSupply } = yfPool.contract;\n\n      if (totalSupply === undefined) {\n        return undefined;\n      }\n\n      return BigNumber.from(totalSupply);\n    });\n  }, [yfPools]);\n\n  const value: YfPoolsType = {\n    yfPools,\n    getYFKnownPoolByName,\n    stakingContract,\n    getYFTotalStakedInUSD,\n    getYFTotalEffectiveStakedInUSD,\n    getPoolBalanceInUSD,\n    getPoolEffectiveBalanceInUSD,\n    getMyPoolBalanceInUSD,\n    getMyPoolEffectiveBalanceInUSD,\n    getYFDistributedRewards,\n    getYFTotalSupply,\n  };\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n\nexport default YfPoolsProvider;\n","import BigNumber from 'bignumber.js';\nimport { AbiItem } from 'web3-utils';\nimport Web3Contract, { createAbiItem } from 'web3/web3Contract';\n\nconst ABI: AbiItem[] = [\n  createAbiItem('NR_OF_EPOCHS', [], ['uint256']),\n  createAbiItem('TOTAL_DISTRIBUTED_AMOUNT', [], ['uint256']),\n  createAbiItem('epochStart', [], ['uint256']),\n  createAbiItem('epochDuration', [], ['uint256']),\n  createAbiItem('getCurrentEpoch', [], ['uint256']),\n  createAbiItem('getPoolSize', ['uint128'], ['uint256']),\n  createAbiItem('getEpochStake', ['address', 'uint128'], ['uint256']),\n  createAbiItem('massHarvest', [], ['uint256']),\n];\n\nexport class YfPoolContract extends Web3Contract {\n  constructor(yfAddress: string) {\n    super(ABI, yfAddress, 'YIELD FARM');\n\n    this.on(Web3Contract.UPDATE_ACCOUNT, () => {\n      // reset user data\n      this.userStaked = undefined;\n      this.toClaim = undefined;\n      this.emit(Web3Contract.UPDATE_DATA);\n    });\n  }\n\n  // common data\n  totalEpochs?: number;\n  totalSupply?: number;\n  epochDuration?: number;\n  epoch1Start?: number;\n  currentEpoch?: number;\n  poolSize?: BigNumber;\n\n  // user data\n  userStaked?: BigNumber;\n  toClaim?: BigNumber;\n\n  // computed data\n  get lastActiveEpoch(): number | undefined {\n    if (this.currentEpoch === undefined || this.totalEpochs === undefined) {\n      return undefined;\n    }\n\n    return Math.min(this.currentEpoch, this.totalEpochs);\n  }\n\n  get isPoolEnded(): boolean | undefined {\n    if (this.currentEpoch === undefined || this.totalEpochs === undefined) {\n      return undefined;\n    }\n\n    return this.currentEpoch > this.totalEpochs;\n  }\n\n  get poolEndDate(): number | undefined {\n    if (this.epoch1Start === undefined || this.totalEpochs === undefined || this.epochDuration === undefined) {\n      return undefined;\n    }\n\n    return this.epoch1Start + this.totalEpochs * this.epochDuration;\n  }\n\n  get epochReward(): number | undefined {\n    if (this.totalSupply === undefined || this.totalEpochs === undefined || this.totalEpochs === 0) {\n      return undefined;\n    }\n\n    return this.totalSupply / this.totalEpochs;\n  }\n\n  get potentialReward(): BigNumber | undefined {\n    if (this.isPoolEnded) {\n      return BigNumber.ZERO;\n    }\n\n    const epochReward = this.epochReward;\n\n    if (\n      this.poolSize === undefined ||\n      this.poolSize.isEqualTo(BigNumber.ZERO) ||\n      this.userStaked === undefined ||\n      epochReward === undefined\n    ) {\n      return undefined;\n    }\n\n    return this.userStaked.dividedBy(this.poolSize).multipliedBy(epochReward);\n  }\n\n  get distributedReward(): number | undefined {\n    const lastActiveEpoch = this.lastActiveEpoch;\n    const epochReward = this.epochReward;\n\n    if (lastActiveEpoch === undefined || epochReward === undefined) {\n      return undefined;\n    }\n\n    return epochReward * (lastActiveEpoch === this.totalEpochs ? lastActiveEpoch : lastActiveEpoch - 1);\n  }\n\n  async loadCommon(): Promise<void> {\n    const [totalEpochs, totalForDistribution, epochDuration, epochStart, currentEpoch] = await this.batch([\n      { method: 'NR_OF_EPOCHS' },\n      { method: 'TOTAL_DISTRIBUTED_AMOUNT' },\n      { method: 'epochDuration' },\n      { method: 'epochStart' },\n      { method: 'getCurrentEpoch' },\n    ]);\n\n    this.totalEpochs = Number(totalEpochs);\n    this.totalSupply = Number(totalForDistribution);\n    this.epochDuration = Number(epochDuration);\n    this.epoch1Start = Number(epochStart);\n    this.currentEpoch = Number(currentEpoch);\n    this.emit(Web3Contract.UPDATE_DATA);\n\n    const [currentPoolSize] = await this.batch([{ method: 'getPoolSize', methodArgs: [this.currentEpoch] }]);\n    this.poolSize = BigNumber.from(currentPoolSize);\n    this.emit(Web3Contract.UPDATE_DATA);\n  }\n\n  async loadUserData(): Promise<void> {\n    const account = this.account;\n\n    this.assertAccount();\n\n    const currentEpoch = await this.batch([{ method: 'getCurrentEpoch' }]);\n    this.currentEpoch = Number(currentEpoch);\n\n    const [currentEpochStake, toClaim] = await this.batch([\n      { method: 'getEpochStake', methodArgs: [account, this.currentEpoch] },\n      { method: 'massHarvest', callArgs: { from: account } },\n    ]);\n\n    this.userStaked = BigNumber.from(currentEpochStake);\n    this.toClaim = BigNumber.from(toClaim);\n    this.emit(Web3Contract.UPDATE_DATA);\n  }\n\n  async claim(gasPrice?: number): Promise<BigNumber | undefined> {\n    const result = await this.send('massHarvest', [], {}, gasPrice);\n    return BigNumber.from(result);\n  }\n}\n","import BigNumber from 'bignumber.js';\nimport { AbiItem } from 'web3-utils';\nimport Web3Contract, { createAbiItem } from 'web3/web3Contract';\n\nconst ABI: AbiItem[] = [\n  createAbiItem('epoch1Start', [], ['uint256']),\n  createAbiItem('epochDuration', [], ['uint256']),\n  createAbiItem('getCurrentEpoch', [], ['uint128']),\n  createAbiItem('getEpochPoolSize', ['address', 'uint128'], ['uint256']),\n  createAbiItem('getEpochUserBalance', ['address', 'address', 'uint128'], ['uint256']),\n  createAbiItem('balanceOf', ['address', 'address'], ['uint256']),\n  createAbiItem('deposit', ['address', 'uint256'], []),\n  createAbiItem('withdraw', ['address', 'uint256'], []),\n];\n\nexport type YfStakedToken = {\n  currentEpochPoolSize?: BigNumber;\n  nextEpochPoolSize?: BigNumber;\n  currentEpochUserBalance?: BigNumber;\n  nextEpochUserBalance?: BigNumber;\n};\n\nexport class YfStakingContract extends Web3Contract {\n  constructor(address: string) {\n    super(ABI, address, 'YF STAKING');\n\n    this.stakedTokens = new Map();\n\n    this.on(Web3Contract.UPDATE_ACCOUNT, () => {\n      // reset user data\n      this.stakedTokens.forEach(stakedToken => {\n        stakedToken.currentEpochUserBalance = undefined;\n        stakedToken.nextEpochUserBalance = undefined;\n      });\n      this.emit(Web3Contract.UPDATE_DATA);\n    });\n  }\n\n  // common data\n  currentEpoch?: number;\n  epochStart?: number;\n  epochDuration?: number;\n  stakedTokens: Map<string, YfStakedToken>;\n\n  // computed data\n  get epochDates(): [number, number, number] | undefined {\n    if (!this.epochStart || !this.currentEpoch || !this.epochDuration) {\n      return undefined;\n    }\n\n    const startDate = (this.epochStart + (this.currentEpoch - 1) * this.epochDuration) * 1_000;\n    const endDate = (this.epochStart + this.currentEpoch * this.epochDuration) * 1_000;\n    const progress = ((Date.now() - startDate) / (this.epochDuration * 1_000)) * 100;\n\n    return [startDate, endDate, progress];\n  }\n\n  async loadCommonFor(tokenAddress: string): Promise<void> {\n    const [currentEpoch, epochStart, epochDuration] = await this.batch([\n      { method: 'getCurrentEpoch' },\n      { method: 'epoch1Start' },\n      { method: 'epochDuration' },\n    ]);\n\n    const cEpoch = (this.currentEpoch = Number(currentEpoch));\n\n    this.epochStart = Number(epochStart);\n    this.epochDuration = Number(epochDuration);\n\n    const [currentEpochPoolSize, nextEpochPoolSize] = await this.batch([\n      { method: 'getEpochPoolSize', methodArgs: [tokenAddress, cEpoch] },\n      { method: 'getEpochPoolSize', methodArgs: [tokenAddress, cEpoch + 1] },\n    ]);\n\n    const stakedToken = {\n      ...this.stakedTokens.get(tokenAddress),\n      currentEpochPoolSize: BigNumber.from(currentEpochPoolSize),\n      nextEpochPoolSize: BigNumber.from(nextEpochPoolSize),\n    };\n\n    this.stakedTokens.set(tokenAddress, stakedToken);\n    this.emit(Web3Contract.UPDATE_DATA);\n  }\n\n  async loadUserDataFor(tokenAddress: string): Promise<void> {\n    const account = this.account;\n\n    this.assertAccount();\n\n    const [currentEpoch] = await this.batch([{ method: 'getCurrentEpoch' }]);\n    const cEpoch = (this.currentEpoch = Number(currentEpoch));\n\n    const [userBalance, currentEpochUserBalance, nextEpochUserBalance] = await this.batch([\n      { method: 'balanceOf', methodArgs: [account, tokenAddress] },\n      { method: 'getEpochUserBalance', methodArgs: [account, tokenAddress, cEpoch] },\n      { method: 'getEpochUserBalance', methodArgs: [account, tokenAddress, cEpoch + 1] },\n    ]);\n\n    const stakedToken = {\n      ...this.stakedTokens.get(tokenAddress),\n      userBalance: BigNumber.from(userBalance),\n      currentEpochUserBalance: BigNumber.from(currentEpochUserBalance),\n      nextEpochUserBalance: BigNumber.from(nextEpochUserBalance),\n    };\n\n    this.stakedTokens.set(tokenAddress, stakedToken);\n    this.emit(Web3Contract.UPDATE_DATA);\n  }\n\n  async stake(tokenAddress: string, amount: BigNumber, gasPrice: number): Promise<BigNumber | undefined> {\n    const result = await this.send('deposit', [tokenAddress, amount], {}, gasPrice);\n    return BigNumber.from(result);\n  }\n\n  async unstake(tokenAddress: string, amount: BigNumber, gasPrice: number): Promise<BigNumber | undefined> {\n    const result = await this.send('withdraw', [tokenAddress, amount], {}, gasPrice);\n    return BigNumber.from(result);\n  }\n}\n","import { FC, createContext, useContext } from 'react';\nimport BigNumber from 'bignumber.js';\n\nimport { useConfig } from 'components/providers/configProvider';\n\nimport { InvariantContext } from 'utils/context';\nimport { PaginatedResult, queryfy } from 'utils/fetch';\n\nexport enum APIYFPoolActionType {\n  DEPOSIT = 'DEPOSIT',\n  WITHDRAW = 'WITHDRAW',\n}\n\nexport type APIYFPoolTransaction = {\n  userAddress: string;\n  tokenAddress: string;\n  amount: BigNumber;\n  transactionHash: string;\n  actionType: APIYFPoolActionType;\n  blockTimestamp: number;\n};\n\nexport type APIYFPoolChart = {\n  [tokenAddress: string]: {\n    [point: number]: {\n      sumDeposits: string;\n      sumWithdrawals: string;\n    };\n  };\n};\n\nexport type YfAPIType = {\n  fetchYFPoolTransactions(\n    page: number,\n    limit: number,\n    tokenAddress: string,\n    userAddress: string,\n    actionType: string,\n  ): Promise<PaginatedResult<APIYFPoolTransaction>>;\n  fetchYFPoolChart(tokenAddress: string[], start: number, end: number, scale?: string): Promise<APIYFPoolChart>;\n};\n\nconst Context = createContext<YfAPIType>(InvariantContext('YfAPIProvider'));\n\nexport function useYfAPI(): YfAPIType {\n  return useContext(Context);\n}\n\nconst YfAPIProvider: FC = props => {\n  const config = useConfig();\n\n  function fetchYFPoolTransactions(\n    page = 1,\n    limit = 10,\n    tokenAddress: string,\n    userAddress: string = 'all',\n    actionType: string = 'all',\n  ): Promise<PaginatedResult<APIYFPoolTransaction>> {\n    const query = queryfy({\n      page: String(page),\n      limit: String(limit),\n      userAddress,\n      actionType,\n      tokenAddress,\n    });\n\n    const url = new URL(`/api/yieldfarming/staking-actions/list?${query}`, config.api.baseUrl);\n\n    return fetch(url.toString())\n      .then(result => result.json())\n      .then(result => {\n        if (result.status !== 200) {\n          return Promise.reject(new Error(result.data));\n        }\n\n        return result;\n      })\n      .then((result: PaginatedResult<APIYFPoolTransaction>) => {\n        return {\n          ...result,\n          data: (result.data ?? []).map((item: APIYFPoolTransaction) => ({\n            ...item,\n            amount: new BigNumber(item.amount),\n          })),\n        };\n      });\n  }\n\n  function fetchYFPoolChart(\n    tokenAddress: string[],\n    start: number,\n    end: number,\n    scale?: string,\n  ): Promise<APIYFPoolChart> {\n    const query = queryfy({\n      tokenAddress,\n      start,\n      end,\n      scale,\n    });\n\n    const url = new URL(`/api/yieldfarming/staking-actions/chart?${query}`, config.api.baseUrl);\n\n    return fetch(url.toString())\n      .then(result => result.json())\n      .then(result => {\n        if (result.status !== 200) {\n          return Promise.reject(new Error(result.data));\n        }\n\n        return result.data;\n      });\n  }\n\n  const value = {\n    fetchYFPoolTransactions,\n    fetchYFPoolChart,\n  };\n\n  return <Context.Provider value={value}>{props.children}</Context.Provider>;\n};\n\nexport default YfAPIProvider;\n","import React, { FC, Suspense, lazy, useEffect } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport AntdSpin from 'antd/lib/spin';\n\nimport { useWarning } from 'components/providers/warning-provider';\nimport YfAPIProvider from 'modules/yield-farming/api';\n\nimport YfPoolsProvider from './providers/pools-provider';\n\nconst PoolsView = lazy(() => import('./views/pools-view'));\nconst PoolView = lazy(() => import('./views/pool-view'));\n\nconst YieldFarmingView: FC = () => {\n  const warning = useWarning();\n\n  useEffect(() => {\n    let warningDestructor: () => void;\n\n    if (isMobile) {\n      warningDestructor = warning.addWarn({\n        text: 'Transactions can only be made from the desktop version using Metamask',\n        closable: true,\n        storageIdentity: 'bb_desktop_metamask_tx_warn',\n      });\n    } else {\n      warningDestructor = warning.addWarn({\n        text: 'Do not send funds directly to the contract!',\n        closable: true,\n        storageIdentity: 'bb_send_funds_warn',\n      });\n    }\n\n    return () => {\n      warningDestructor?.();\n    };\n  }, [isMobile]);\n\n  return (\n    <YfAPIProvider>\n      <YfPoolsProvider>\n        <Suspense fallback={<AntdSpin />}>\n          <Switch>\n            <Route path=\"/yield-farming\" exact component={PoolsView} />\n            <Route path=\"/yield-farming/:poolId\" exact component={PoolView} />\n            <Redirect to=\"/yield-farming\" />\n          </Switch>\n        </Suspense>\n      </YfPoolsProvider>\n    </YfAPIProvider>\n  );\n};\n\nexport default YieldFarmingView;\n"],"sourceRoot":""}